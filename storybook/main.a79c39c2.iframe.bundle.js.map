{"version":3,"file":"main.a79c39c2.iframe.bundle.js","mappings":";AAkBA;AACA;AACA;AACA;AAIA;AACA;AACA;AAOA;AACA;AACA;AAIA;AACA;AAOA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;;;;;AAUA;AACA;;AAEA;;AAEA;;;;ACpEA;AACA;;;;;;AAMA;;;;;;;;;;;;;;;;ACKA;;;;;;;;ACbA","sources":["webpack://red-and-king-components/./src/components/Button/Button.tsx","webpack://red-and-king-components/./src/design-tokens/Colors/ColorCard.tsx","webpack://red-and-king-components/./src/design-tokens/Colors/ColorCardsList.tsx","webpack://red-and-king-components/./src/styles/GlobalStyles.tsx"],"sourcesContent":["import styled from '@emotion/styled';\nimport css from '@emotion/css';\nimport { cssVariables } from '../../styles/theme';\n\ninterface ButtonStyledProps {\n  size?: 'small' | 'default' | 'large';\n  color?: 'primary' | 'secondary';\n}\ninterface ButtonProps extends ButtonStyledProps {\n  label: string;\n  onClick?: () => void;\n}\n\nconst styledPropHandler = {\n  color({ color }: ButtonStyledProps) {\n    switch (color) {\n      case 'secondary':\n        return css`\n          box-shadow: ${`inset 0px 0px 0px  ${cssVariables.topdoneComponentsBorderButtonSecondaryDefault}  ${cssVariables.topdoneComponentsColorBorderButtonSecondaryDefault}`};\n          color: ${cssVariables.topdoneComponentsColorTextButtonSecondaryDefault};\n          background-color: ${cssVariables.topdoneComponentsColorBackgroundButtonSecondaryDefault};\n        `;\n      case 'primary':\n      default:\n        return css`\n          color: ${cssVariables.topdoneComponentsColorTextButtonPrimaryDefault};\n          background-color: ${cssVariables.topdoneComponentsColorBackgroundButtonPrimaryDefault};\n        `;\n    }\n  },\n  hoverColor({ color }: ButtonStyledProps) {\n    switch (color) {\n      case 'secondary':\n        return css`\n          color: ${cssVariables.topdoneComponentsColorTextButtonSecondaryHover};\n          background-color: ${cssVariables.topdoneComponentsColorBackgroundButtonSecondaryHover};\n        `;\n      case 'primary':\n      default:\n        return css`\n          background-color: ${cssVariables.topdoneComponentsColorBackgroundButtonPrimaryHover};\n        `;\n    }\n  },\n  size({ size }: ButtonStyledProps) {\n    switch (size) {\n      case 'small':\n        return css`\n          ${cssVariables.topdoneComponentsTypographyButtonMd}\n          padding: ${`${cssVariables.topdoneComponentsPaddingButtonSmallVertical} ${cssVariables.topdoneComponentsPaddingButtonSmallHorizontal}`};\n          border-radius: ${cssVariables.topdoneComponentsRadiusButton};\n        `;\n      case 'large':\n        return css`\n          ${cssVariables.topdoneComponentsTypographyButtonLg}\n          padding: ${`${cssVariables.topdoneComponentsPaddingButtonLargeVertical} ${cssVariables.topdoneComponentsPaddingButtonLargeHorizontal}`};\n          border-radius: ${cssVariables.topdoneComponentsRadiusButton};\n        `;\n      case 'default':\n      default:\n        return css`\n          ${cssVariables.topdoneComponentsTypographyButtonMd}\n          padding: ${`${cssVariables.topdoneComponentsPaddingButtonMediumVertical} ${cssVariables.topdoneComponentsPaddingButtonMediumHorizontal}`};\n          border-radius: ${cssVariables.topdoneComponentsRadiusButton};\n        `;\n    }\n  },\n};\n\nexport const ButtonStyled = styled('button')<ButtonStyledProps>`\n  cursor: pointer;\n  display: inline-block;\n  transition: color 0.5s ease, background-color 0.5s ease;\n  border: none;\n  ${styledPropHandler.color}\n  ${styledPropHandler.size}\n  &:hover {\n    ${styledPropHandler.hoverColor}\n  }\n`;\n\nconst Button = ({ label, size, color, onClick }: ButtonProps) => (\n  <ButtonStyled color={color} onClick={onClick} size={size} type=\"button\">\n    {label}\n  </ButtonStyled>\n);\n\nexport default Button;\n","import styled from '@emotion/styled';\nimport getCorrectTextColor from './getCorrectTextColor';\n\ninterface ColorCardProps {\n  color: string;\n}\n\nconst ColorCard = styled('span')<ColorCardProps>`\n  width: 70px;\n  height: 70px;\n  display: inline-block;\n  background-color: ${({ color }) => color};\n  color: ${({ color }) => getCorrectTextColor(color)};\n  font-size: 12px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  text-align: center;\n`;\n\nexport default ColorCard;\n","import styled from '@emotion/styled';\n\ninterface ColorCardsListProps {\n  colorName: string;\n  children: React.ReactNode;\n}\n\nconst ColorCardsListStyled = styled('div')`\n  align-items: center;\n  padding: 4px;\n  margin: 0 10px;\n  display: flex;\n  flex-wrap: wrap;\n\n  & .title {\n    width: 100%;\n    margin: 10px 0;\n  }\n\n  & .container {\n    box-shadow: 0 0 4px rgba(0, 0, 0, 0.4);\n    display: flex;\n  }\n`;\n\nconst ColorCardsList = ({ colorName, children }: ColorCardsListProps) => (\n  <ColorCardsListStyled>\n    <p className=\"title\">{colorName}</p>\n    <div className=\"container\">{children}</div>\n  </ColorCardsListStyled>\n);\n\nexport default ColorCardsList;\n","import { Global, css } from '@emotion/react';\n\nconst styles = css`\n  @import url('https://fonts.googleapis.com/css2?family=Signika&display=swap');\n\n  body {\n    margin: 0;\n    padding: 0;\n    font-family: 'Signika';\n  }\n`;\n\nconst GlobalStyles = () => <Global styles={styles} />;\n\nexport default GlobalStyles;\n"],"names":[],"sourceRoot":""}