{"version":3,"file":"main.edbb2421.iframe.bundle.js","mappings":";;;;;AAiBA;AAMA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAQA;AACA;AACA;;AAEA;AACA;;AAEA;AAIA;AACA;;AAEA;;AAEA;;;;;;;;;AC9CA;AAGA;AACA;AACA;;;;;;;;;;;;;;;;ACAA;;;;;;;;ACZA","sources":["webpack://red-and-king-components/./src/components/Button/Button.tsx","webpack://red-and-king-components/./src/design-tokens/Colors/ColorCard.tsx","webpack://red-and-king-components/./src/design-tokens/Colors/ColorCardsList.tsx","webpack://red-and-king-components/./src/styles/GlobalStyles.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport { cssVariables } from '../../styles/theme';\n\ninterface ButtonStyledProps {\n  size?: 'small' | 'default' | 'large';\n  color?: 'primary' | 'secondary';\n}\ninterface ButtonProps extends ButtonStyledProps {\n  label: string;\n  onClick?: () => void;\n}\n\nconst cssClassName = css`\n  cursor: pointer;\n  display: inline-block;\n  transition: color 0.5s ease, background-color 0.5s ease;\n  border: none;\n`;\n\nconst getCssClassNameForSize = ({ size }: ButtonStyledProps): string => {\n  switch (size) {\n    case 'small':\n      return css`\n        ${cssVariables.topdoneComponentsTypographyButtonMd}\n        padding: ${`${cssVariables.topdoneComponentsPaddingButtonSmallVertical} ${cssVariables.topdoneComponentsPaddingButtonSmallHorizontal}`};\n        border-radius: ${cssVariables.topdoneComponentsRadiusButton};\n      `;\n    case 'large':\n      return css`\n        ${cssVariables.topdoneComponentsTypographyButtonLg}\n        padding: ${`${cssVariables.topdoneComponentsPaddingButtonLargeVertical} ${cssVariables.topdoneComponentsPaddingButtonLargeHorizontal}`};\n        border-radius: ${cssVariables.topdoneComponentsRadiusButton};\n      `;\n    case 'default':\n    default:\n      return css`\n        ${cssVariables.topdoneComponentsTypographyButtonMd}\n        padding: ${`${cssVariables.topdoneComponentsPaddingButtonMediumVertical} ${cssVariables.topdoneComponentsPaddingButtonMediumHorizontal}`};\n        border-radius: ${cssVariables.topdoneComponentsRadiusButton};\n      `;\n  }\n};\n\nconst getCssClassNameForColor = ({ color }: ButtonStyledProps): string => {\n  switch (color) {\n    case 'secondary':\n      return css`\n        box-shadow: ${`inset 0px 0px 0px  ${cssVariables.topdoneComponentsBorderButtonSecondaryDefault}  ${cssVariables.topdoneComponentsColorBorderButtonSecondaryDefault}`};\n        color: ${cssVariables.topdoneComponentsColorTextButtonSecondaryDefault};\n        background-color: ${cssVariables.topdoneComponentsColorBackgroundButtonSecondaryDefault};\n        &:hover {\n          color: ${cssVariables.topdoneComponentsColorTextButtonSecondaryHover};\n          background-color: ${cssVariables.topdoneComponentsColorBackgroundButtonSecondaryHover};\n        }\n      `;\n    case 'primary':\n    default:\n      return css`\n        color: ${cssVariables.topdoneComponentsColorTextButtonPrimaryDefault};\n        background-color: ${cssVariables.topdoneComponentsColorBackgroundButtonPrimaryDefault};\n        &:hover {\n          background-color: ${cssVariables.topdoneComponentsColorBackgroundButtonPrimaryHover};\n        }\n      `;\n  }\n};\n\nconst getStyledClassNames = (props: ButtonStyledProps): string =>\n  [\n    cssClassName,\n    getCssClassNameForSize(props),\n    getCssClassNameForColor(props),\n  ].join(' ');\n\nconst Button = ({ label, size, color, onClick }: ButtonProps): JSX.Element => (\n  <button\n    className={getStyledClassNames({ color, size })}\n    onClick={onClick}\n    type=\"button\"\n  >\n    {label}\n  </button>\n);\n\nexport default Button;\n","import { css } from '@emotion/css';\nimport getCorrectTextColor from './getCorrectTextColor';\n\ninterface ColorCardProps {\n  color: string;\n  children: React.ReactNode;\n}\n\nconst cssClassName = css`\n  width: 70px;\n  height: 70px;\n  display: inline-block;\n  font-size: 12px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  text-align: center;\n`;\n\nconst getCssClassNameForColor = ({ color }: any): string => css`\n  background-color: ${color};\n  color: ${getCorrectTextColor(color)};\n`;\n\nconst getStyledClassNames = (props: any): string =>\n  [cssClassName, getCssClassNameForColor(props)].join(' ');\n\nconst ColorCard = ({ color, children }: ColorCardProps) => (\n  <span className={getStyledClassNames({ color })}>{children}</span>\n);\n\nexport default ColorCard;\n","import { css } from '@emotion/css';\ninterface ColorCardsListProps {\n  colorName: string;\n  children: React.ReactNode;\n}\n\nconst cssClassName = css`\n  align-items: center;\n  padding: 4px;\n  margin: 0 10px;\n  display: flex;\n  flex-wrap: wrap;\n\n  & .title {\n    width: 100%;\n    margin: 10px 0;\n  }\n\n  & .container {\n    box-shadow: 0 0 4px rgba(0, 0, 0, 0.4);\n    display: flex;\n  }\n`;\n\nconst ColorCardsList = ({ colorName, children }: ColorCardsListProps) => (\n  <div className={cssClassName}>\n    <p className=\"title\">{colorName}</p>\n    <div className=\"container\">{children}</div>\n  </div>\n);\n\nexport default ColorCardsList;\n","import { Global, css } from '@emotion/react';\n\nconst globalCss = css`\n  @import url('https://fonts.googleapis.com/css2?family=Signika&display=swap');\n\n  body {\n    margin: 0;\n    padding: 0;\n    font-family: 'Signika';\n  }\n`;\n\nconst GlobalStyles = () => <Global styles={globalCss} />;\n\nexport default GlobalStyles;\n"],"names":[],"sourceRoot":""}