{"version":3,"file":"main.3935f37b.iframe.bundle.js","mappings":";AAkBA;AACA;AACA;AACA;AAIA;AACA;AACA;AAOA;AACA;AACA;AAIA;AACA;AACA;;;AASA;AACA;AACA;;;AAKA;AACA;AACA;;;AAMA;AACA;AACA;;;;;;;;AAaA;AACA;;AAEA;;AAEA;;;;AC3EA;AACA;;;;;;AAMA;;;;;;;;;;;;;;;;ACKA;;;;;;;;;;;;;;;;ACKA;AACA;;AAEA;;;;;AAKA;;;;;;;;AC1BA","sources":["webpack://red-and-king-components/./src/components/Button/Button.tsx","webpack://red-and-king-components/./src/design-tokens/Colors/ColorCard.tsx","webpack://red-and-king-components/./src/design-tokens/Colors/ColorCardsList.tsx","webpack://red-and-king-components/./src/design-tokens/Spacing/SpacesList.tsx","webpack://red-and-king-components/./src/styles/GlobalStyles.tsx"],"sourcesContent":["import styled from '@emotion/styled';\nimport css from '@emotion/css';\nimport { tier3 } from '../../styles/theme';\n\ninterface ButtonStyledProps {\n  size?: 'small' | 'default' | 'large';\n  color?: 'primary' | 'secondary';\n}\ninterface ButtonProps extends ButtonStyledProps {\n  label: string;\n  onClick?: () => void;\n}\n\nconst styledPropHandler = {\n  color({ color }: ButtonStyledProps) {\n    switch (color) {\n      case 'secondary':\n        return css`\n          box-shadow: ${tier3.button.boxShadow.secondary.default};\n          color: ${tier3.button.color.secondary.default};\n          background-color: ${tier3.button.background.secondary.default};\n        `;\n      case 'primary':\n      default:\n        return css`\n          color: ${tier3.button.color.primary.default};\n          background-color: ${tier3.button.background.primary.default};\n        `;\n    }\n  },\n  hoverColor({ color }: ButtonStyledProps) {\n    switch (color) {\n      case 'secondary':\n        return css`\n          color: ${tier3.button.color.secondary.hover};\n          background-color: ${tier3.button.background.secondary.hover};\n        `;\n      case 'primary':\n      default:\n        return css`\n          color: ${tier3.button.color.primary.hover};\n          background-color: ${tier3.button.background.primary.hover};\n        `;\n    }\n  },\n  size({ size }: ButtonStyledProps) {\n    switch (size) {\n      case 'small':\n        return css`\n          font-size: 14px;\n          line-height: 16px;\n          padding: ${tier3.button.padding.small};\n          border-radius: ${tier3.button.borderRadius.small};\n        `;\n      case 'large':\n        return css`\n          font-size: 24px;\n          line-height: 24px;\n          padding: ${tier3.button.padding.large};\n          border-radius: ${tier3.button.borderRadius.large};\n        `;\n      case 'default':\n      default:\n        return css`\n          font-size: 14px;\n          line-height: 16px;\n          padding: ${tier3.button.padding.default};\n          border-radius: ${tier3.button.borderRadius.default};\n        `;\n    }\n  },\n};\n\nexport const ButtonStyled = styled('button')<ButtonStyledProps>`\n  font-family: 'Signika';\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n  transition: color 0.5s ease, background-color 0.5s ease;\n  ${styledPropHandler.color}\n  ${styledPropHandler.size}\n  &:hover {\n    ${styledPropHandler.hoverColor}\n  }\n`;\n\nconst Button = ({ label, size, color, onClick }: ButtonProps) => (\n  <ButtonStyled color={color} onClick={onClick} size={size} type=\"button\">\n    {label}\n  </ButtonStyled>\n);\n\nexport default Button;\n","import styled from '@emotion/styled';\nimport getCorrectTextColor from './getCorrectTextColor';\n\ninterface ColorCardProps {\n  color: string;\n}\n\nconst ColorCard = styled('span')<ColorCardProps>`\n  width: 70px;\n  height: 70px;\n  display: inline-block;\n  background-color: ${({ color }) => color};\n  color: ${({ color }) => getCorrectTextColor(color)};\n  font-size: 12px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  text-align: center;\n`;\n\nexport default ColorCard;\n","import styled from '@emotion/styled';\n\ninterface ColorCardsListProps {\n  colorName: string;\n  children: React.ReactNode;\n}\n\nconst ColorCardsListStyled = styled('div')`\n  align-items: center;\n  padding: 4px;\n  margin: 0 10px;\n  display: flex;\n  flex-wrap: wrap;\n\n  & .title {\n    width: 100%;\n    margin: 10px 0;\n  }\n\n  & .container {\n    box-shadow: 0 0 4px rgba(0, 0, 0, 0.4);\n    display: flex;\n  }\n`;\n\nconst ColorCardsList = ({ colorName, children }: ColorCardsListProps) => (\n  <ColorCardsListStyled>\n    <p className=\"title\">{colorName}</p>\n    <div className=\"container\">{children}</div>\n  </ColorCardsListStyled>\n);\n\nexport default ColorCardsList;\n","import styled from '@emotion/styled';\nimport designTokens from '../../../design-tokens.json';\nimport { tier1 } from '../../styles/theme';\nimport { DesignTokensData, DesignTokensItem } from '../DesignTokensInterfaces';\n\nconst colorData = designTokens.global as DesignTokensData;\n\nconst SpaceItem = styled(({ className, name, value }) => (\n  <div className={className}>\n    <p className=\"title\">{name}</p>\n    <p className=\"space\" />\n  </div>\n))`\n  margin: 2px 10px;\n  display: flex;\n  background-color: #f8f8f8;\n  .title {\n    width: 80px;\n    padding: 8px;\n    margin: 0;\n    text-align: right;\n  }\n  .space {\n    margin: 0;\n    font-size: 12px;\n    display: flex;\n    align-items: center;\n    text-align: center;\n    background-color: ${tier1.GlobalPrimary100};\n    width: ${({ value }) => `${value}px`};\n    &::before {\n      content: ' ${({ value }) => `${value}px`}';\n      display: block;\n      padding-left: 4px;\n    }\n  }\n`;\n\nconst SpacesList = () => (\n  <>\n    <h1>Design tokens spacing</h1>\n\n    {Object.entries(colorData).map(([spacingName, value], index) => {\n      if (value.type === 'spacing') {\n        const spacingDataItem = value as DesignTokensItem;\n        return (\n          <SpaceItem\n            key={index}\n            name={spacingName}\n            value={spacingDataItem.value}\n          />\n        );\n      }\n      return null;\n    })}\n  </>\n);\n\nexport default SpacesList;\n","import { Global, css } from '@emotion/react';\n\nconst styles = css`\n  @import url('https://fonts.googleapis.com/css2?family=Signika&display=swap');\n\n  body {\n    margin: 0;\n    padding: 0;\n    font-family: 'Signika';\n  }\n`;\n\nconst GlobalStyles = () => <Global styles={styles} />;\n\nexport default GlobalStyles;\n"],"names":[],"sourceRoot":""}