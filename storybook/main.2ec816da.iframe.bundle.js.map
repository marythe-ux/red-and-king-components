{"version":3,"file":"main.2ec816da.iframe.bundle.js","mappings":";;;;;AAUA;;AAEA;;;;ACQA;;;AAKA;;;AASA;;;AAKA;;;AASA;;;AAKA;;;AAKA;;;;;;;;;AAcA;AACA;;AAEA;;AAEA","sources":["webpack://red-and-king-components/./src/theming/colors/Colors.tsx","webpack://red-and-king-components/./src/components/Button/Button.tsx"],"sourcesContent":["// import React from 'react';\nimport styled from '@emotion/styled';\nimport designTokens from '../../../tokens/design-tokens.json';\n// import css from '@emotion/css';\n\nconst ColorCard = styled('span')`\n  width: 40px;\n  height: 40px;\n  display: inline-block;\n  margin: 2px;\n  background-color: ${({ color }) => color};\n  border: solid 1px #ccc;\n`;\n\nconst printColor = (\n  colorName: string,\n  colorData: any\n): JSX.Element | JSX.Element[] => {\n  if (colorData.type === 'color') {\n    return (\n      <>\n        <ColorCard color={colorData.value} /> {colorName}\n      </>\n    );\n  }\n\n  return Object.entries(colorData).map(([name, value]) => (\n    <div>\n      <div>{printColor(`${colorName} ${name}`, value)}</div>\n    </div>\n  ));\n};\n\nconst Colors = () => {\n  const colors = designTokens.color;\n\n  return <div>{printColor('', colors)}</div>;\n};\n\nexport default Colors;\n","import styled from '@emotion/styled';\nimport css from '@emotion/css';\n\ninterface ButtonStyledProps {\n  size?: 'small' | 'medium' | 'large';\n  color?: 'primary' | 'secondary';\n}\ninterface ButtonProps extends ButtonStyledProps {\n  label: string;\n  onClick?: () => void;\n}\n\nconst styledPropHandler = {\n  color({ color }: ButtonStyledProps) {\n    switch (color) {\n      case 'secondary':\n        return css`\n          color: #000000;\n          background-color: #eaeaea;\n          box-shadow: rgba(0, 0, 0, 0.25) 0px 0px 1px 2px inset;\n        `;\n      default:\n        return css`\n          color: #ffc4e3;\n          background-color: #009179;\n        `;\n    }\n  },\n  hoverColor({ color }: ButtonStyledProps) {\n    switch (color) {\n      case 'secondary':\n        return css`\n          color: #333333;\n          background-color: #ffffff;\n        `;\n      default:\n        return css`\n          color: #ffffff;\n          background-color: #005161;\n        `;\n    }\n  },\n  size({ size }: ButtonStyledProps) {\n    switch (size) {\n      case 'small':\n        return css`\n          font-size: 12px;\n          padding: 10px 16px;\n        `;\n      case 'large':\n        return css`\n          font-size: 16px;\n          padding: 12px 24px;\n        `;\n      default:\n        return css`\n          font-size: 14px;\n          padding: 11px 20px;\n        `;\n    }\n  },\n};\n\nexport const ButtonStyled = styled('button')<ButtonStyledProps>`\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 500;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n  transition: color 0.5s ease, background-color 0.5s ease;\n  ${styledPropHandler.color}\n  ${styledPropHandler.size}\n  &:hover {\n    ${styledPropHandler.hoverColor}\n  }\n`;\n\nconst Button = ({ label, size, color, onClick }: ButtonProps) => (\n  <ButtonStyled color={color} onClick={onClick} size={size} type=\"button\">\n    {label}\n  </ButtonStyled>\n);\n\nexport default Button;\n"],"names":[],"sourceRoot":""}